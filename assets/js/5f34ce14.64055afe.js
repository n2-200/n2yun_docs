"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3557],{3905:(e,r,n)=>{n.d(r,{Zo:()=>u,kt:()=>p});var t=n(7294);function a(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function o(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function l(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?o(Object(n),!0).forEach((function(r){a(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function s(e,r){if(null==e)return{};var n,t,a=function(e,r){if(null==e)return{};var n,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||(a[n]=e[n]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=t.createContext({}),i=function(e){var r=t.useContext(c),n=r;return e&&(n="function"==typeof e?e(r):l(l({},r),e)),n},u=function(e){var r=i(e.components);return t.createElement(c.Provider,{value:r},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},v=t.forwardRef((function(e,r){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=i(n),v=a,p=d["".concat(c,".").concat(v)]||d[v]||m[v]||o;return n?t.createElement(p,l(l({ref:r},u),{},{components:n})):t.createElement(p,l({ref:r},u))}));function p(e,r){var n=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=v;var s={};for(var c in r)hasOwnProperty.call(r,c)&&(s[c]=r[c]);s.originalType=e,s[d]="string"==typeof e?e:a,l[1]=s;for(var i=2;i<o;i++)l[i]=n[i];return t.createElement.apply(null,l)}return t.createElement.apply(null,n)}v.displayName="MDXCreateElement"},8542:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>i});var t=n(7462),a=(n(7294),n(3905));const o={description:"Learn about and how to use common core server events!"},l="\ud83d\udda5 Server Event Reference",s={unversionedId:"qb-core/server-event-reference",id:"qb-core/server-event-reference",title:"\ud83d\udda5 Server Event Reference",description:"Learn about and how to use common core server events!",source:"@site/docs/qb-core/server-event-reference.md",sourceDirName:"qb-core",slug:"/qb-core/server-event-reference",permalink:"/docs/qb-core/server-event-reference",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/qb-core/server-event-reference.md",tags:[],version:"current",frontMatter:{description:"Learn about and how to use common core server events!"},sidebar:"tutorialSidebar",previous:{title:"\ud83d\udcca Player Data",permalink:"/docs/qb-core/player-data"},next:{title:"\ud83d\udda5 Server Function Reference",permalink:"/docs/qb-core/server-function-reference"}},c={},i=[{value:"QBCore:Server:CloseServer",id:"qbcoreservercloseserver",level:3},{value:"QBCore:Server:OpenServer",id:"qbcoreserveropenserver",level:3},{value:"QBCore:UpdatePlayer",id:"qbcoreupdateplayer",level:3},{value:"QBCore:Server:SetMetaData",id:"qbcoreserversetmetadata",level:3},{value:"QBCore:ToggleDuty",id:"qbcoretoggleduty",level:3},{value:"QBCore:CallCommand",id:"qbcorecallcommand",level:3}],u={toc:i},d="wrapper";function m(e){let{components:r,...n}=e;return(0,a.kt)(d,(0,t.Z)({},u,n,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"-server-event-reference"},"\ud83d\udda5 Server Event Reference"),(0,a.kt)("h3",{id:"qbcoreservercloseserver"},"QBCore:Server:CloseServer"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Event to check if the server is closed")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"RegisterNetEvent('QBCore:Server:CloseServer', function(reason)\n    local src = source\n    if QBCore.Functions.HasPermission(src, 'admin') then\n        reason = reason or 'No reason specified'\n        QBCore.Config.Server.Closed = true\n        QBCore.Config.Server.ClosedReason = reason\n        for k in pairs(QBCore.Players) do\n            if not QBCore.Functions.HasPermission(k, QBCore.Config.Server.WhitelistPermission) then\n                QBCore.Functions.Kick(k, reason, nil, nil)\n            end\n        end\n    else\n        QBCore.Functions.Kick(src, 'You don\\'t have permissions for this..', nil, nil)\n    end\nend)\n")),(0,a.kt)("h3",{id:"qbcoreserveropenserver"},"QBCore:Server:OpenServer"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Event to check if the server is open")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"RegisterNetEvent('QBCore:Server:OpenServer', function()\n    local src = source\n    if QBCore.Functions.HasPermission(src, 'admin') then\n        QBCore.Config.Server.Closed = false\n    else\n        QBCore.Functions.Kick(src, 'You don\\'t have permissions for this..', nil, nil)\n    end\nend)\n")),(0,a.kt)("h3",{id:"qbcoreupdateplayer"},"QBCore:UpdatePlayer"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Event for updating and saving player data")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"RegisterNetEvent('QBCore:UpdatePlayer', function()\n    local src = source\n    local Player = QBCore.Functions.GetPlayer(src)\n    if not Player then return end\n    local newHunger = Player.PlayerData.metadata['hunger'] - QBCore.Config.Player.HungerRate\n    local newThirst = Player.PlayerData.metadata['thirst'] - QBCore.Config.Player.ThirstRate\n    if newHunger <= 0 then newHunger = 0 end\n    if newThirst <= 0 then newThirst = 0 end\n    Player.Functions.SetMetaData('thirst', newThirst)\n    Player.Functions.SetMetaData('hunger', newHunger)\n    TriggerClientEvent('hud:client:UpdateNeeds', src, newHunger, newThirst)\n    Player.Functions.Save()\nend)\n")),(0,a.kt)("h3",{id:"qbcoreserversetmetadata"},"QBCore:Server:SetMetaData"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Event to set a players metadata")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"RegisterNetEvent('QBCore:Server:SetMetaData', function(meta, data)\n    local src = source\n    local Player = QBCore.Functions.GetPlayer(src)\n    if meta == 'hunger' or meta == 'thirst' then\n        if data > 100 then\n            data = 100\n        end\n    end\n    if Player then\n        Player.Functions.SetMetaData(meta, data)\n    end\n    TriggerClientEvent('hud:client:UpdateNeeds', src, Player.PlayerData.metadata['hunger'], Player.PlayerData.metadata['thirst'])\nend)\n")),(0,a.kt)("h3",{id:"qbcoretoggleduty"},"QBCore:ToggleDuty"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Event to toggle a player's duty status")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"RegisterNetEvent('QBCore:ToggleDuty', function()\n    local src = source\n    local Player = QBCore.Functions.GetPlayer(src)\n    if not Player then return end\n    if Player.PlayerData.job.onduty then\n        Player.Functions.SetJobDuty(false)\n        TriggerClientEvent('QBCore:Notify', src, Lang:t('info.off_duty'))\n    else\n        Player.Functions.SetJobDuty(true)\n        TriggerClientEvent('QBCore:Notify', src, Lang:t('info.on_duty'))\n    end\n    TriggerClientEvent('QBCore:Client:SetDuty', src, Player.PlayerData.job.onduty)\nend)\n")),(0,a.kt)("h3",{id:"qbcorecallcommand"},"QBCore:CallCommand"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Event to trigger a command outside the chat (ex: qb-adminmenu)")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"RegisterNetEvent('QBCore:CallCommand', function(command, args)\n    local src = source\n    if not QBCore.Commands.List[command] then return end\n    local Player = QBCore.Functions.GetPlayer(src)\n    if not Player then return end\n    local hasPerm = QBCore.Functions.HasPermission(src, \"command.\"..QBCore.Commands.List[command].name)\n    if hasPerm then\n        if QBCore.Commands.List[command].argsrequired and #QBCore.Commands.List[command].arguments ~= 0 and not args[#QBCore.Commands.List[command].arguments] then\n            TriggerClientEvent('QBCore:Notify', src, Lang:t('error.missing_args2'), 'error')\n        else\n            QBCore.Commands.List[command].callback(src, args)\n        end\n    else\n        TriggerClientEvent('QBCore:Notify', src, Lang:t('error.no_access'), 'error')\n    end\nend)\n")))}m.isMDXComponent=!0}}]);