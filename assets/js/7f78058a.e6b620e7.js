"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8582],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},x=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=c(n),x=a,f=p["".concat(s,".").concat(x)]||p[x]||u[x]||i;return n?r.createElement(f,o(o({ref:t},d),{},{components:n})):r.createElement(f,o({ref:t},d))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=x;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:a,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}x.displayName="MDXCreateElement"},4715:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const i={description:"Learn how to use the built-in NUI drawtext function!"},o="\ud83d\udcac DrawText",l={unversionedId:"qb-core/drawtext",id:"qb-core/drawtext",title:"\ud83d\udcac DrawText",description:"Learn how to use the built-in NUI drawtext function!",source:"@site/docs/qb-core/drawtext.md",sourceDirName:"qb-core",slug:"/qb-core/drawtext",permalink:"/docs/qb-core/drawtext",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/qb-core/drawtext.md",tags:[],version:"current",frontMatter:{description:"Learn how to use the built-in NUI drawtext function!"},sidebar:"tutorialSidebar",previous:{title:"\u2757 Commands",permalink:"/docs/qb-core/commands"},next:{title:"\ud83d\udcca Player Data",permalink:"/docs/qb-core/player-data"}},s={},c=[{value:"HideText",id:"hidetext",level:3},{value:"DrawText",id:"drawtext",level:3},{value:"ChangeText",id:"changetext",level:3},{value:"KeyPressed",id:"keypressed",level:3}],d={toc:c},p="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"-drawtext"},"\ud83d\udcac DrawText"),(0,a.kt)("p",null,'{% hint style="success" %}\nAccepted positions: Left, Right, Top\n{% endhint %}'),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Function or Event"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"exports","[","'qb-core']:DrawText('message','position')"),(0,a.kt)("td",{parentName:"tr",align:null},"This is a client export that will draw a message at the specified position (listed below)")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"exports","[","'qb-core']:ChangeText('message','position')"),(0,a.kt)("td",{parentName:"tr",align:null},"This is a client export that will change the currently displayed message at the specified position (listed below)")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"exports","[","'qb-core']:HideText()"),(0,a.kt)("td",{parentName:"tr",align:null},"This will hide the text display")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"exports","[","'qb-core']:KeyPressed()"),(0,a.kt)("td",{parentName:"tr",align:null},"This is useful if you want to change the background and hide the text on keypress (if not handled correctly users will have to renter the zone to display)")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"TriggerClientEvent('qb-core:client:DrawText', source, message, position)"),(0,a.kt)("td",{parentName:"tr",align:null},"The same as the export but as an event")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"TriggerClientEvent('qb-core:client:ChangeText', source, message, position)"),(0,a.kt)("td",{parentName:"tr",align:null},"The same as the export but as an event")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"TriggerClientEvent('qb-core:client:HideText', source)"),(0,a.kt)("td",{parentName:"tr",align:null},"The same as the export but as an event")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"TriggerClientEvent('qb-core:client:KeyPressed', source)"),(0,a.kt)("td",{parentName:"tr",align:null},"The same as the export but as an event")))),(0,a.kt)("h3",{id:"hidetext"},"HideText"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Function to hide the currently displayed text")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"-- Source code for reference\n\nlocal function hideText()\n    SendNUIMessage({\n        action = 'HIDE_TEXT',\n    })\nend\nexports('HideText', hideText)\n\n-- Export example\n\nlocal function examplefunction()\n    exports['qb-core']:DrawText('This is a test', 'left')\n    Wait(5000) -- display text for 5 seconds\n    exports['qb-core']:HideText()\nend\n\n-- Client example\n\nlocal function examplefunction()\n    TriggerEvent('qb-core:client:DrawText', 'This is a test', 'left')\n    Wait(5000) -- display text for 5 seconds\n    TriggerEvent('qb-core:client:HideText')\nend\n\n-- Server example\n\nlocal function examplefunction()\n    TriggerClientEvent('qb-core:client:DrawText', source, 'This is a test', 'left')\n    Wait(5000) -- display text for 5 seconds\n    TriggerClientEvent('qb-core:client:HideText', source)\nend\n")),(0,a.kt)("h3",{id:"drawtext"},"DrawText"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Function to draw the text on the screen")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"-- Source code for reference\n\nlocal function drawText(text, position)\n    if not type(position) == \"string\" then position = \"left\" end\n    SendNUIMessage({\n        action = 'DRAW_TEXT',\n        data = {\n            text = text,\n            position = position\n        }\n    })\nend\nexports('DrawText', drawText)\n\n-- Export example\n\nlocal function examplefunction()\n    exports['qb-core']:DrawText('This is a test', 'left')\n    Wait(5000) -- display text for 5 seconds\n    exports['qb-core']:HideText()\nend\n\n-- Client example\n\nlocal function examplefunction()\n    TriggerEvent('qb-core:client:DrawText', 'This is a test', 'left')\n    Wait(5000) -- display text for 5 seconds\n    TriggerEvent('qb-core:client:HideText')\nend\n\n-- Server example\n\nlocal function examplefunction()\n    TriggerClientEvent('qb-core:client:DrawText', source, 'This is a test', 'left')\n    Wait(5000) -- display text for 5 seconds\n    TriggerClientEvent('qb-core:client:HideText', source)\nend\n")),(0,a.kt)("h3",{id:"changetext"},"ChangeText"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Function to change the currently displayed text")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"-- Source code for reference\n\nlocal function changeText(text, position)\n    if not type(position) == \"string\" then position = \"left\" end\n    SendNUIMessage({\n        action = 'CHANGE_TEXT',\n        data = {\n            text = text,\n            position = position\n        }\n    })\nend\nexports('ChangeText', changeText)\n\n-- Export example\n\nlocal function examplefunction()\n    exports['qb-core']:DrawText('This is a test', 'left')\n    Wait(5000) -- change text after 5 seconds\n    exports['qb-core']:ChangeText('This is your changed text', 'left')\n    Wait(5000) -- display changed text for 5 seconds\n    exports['qb-core']:HideText()\nend\n\n-- Client example\n\nlocal function examplefunction()\n    TriggerEvent('qb-core:client:DrawText', 'This is a test', 'left')\n    Wait(5000) -- change text after 5 seconds\n    TriggerEvent('qb-core:client:ChangeText', 'This is your changed text', 'left')\n    Wait(5000) -- display changed text for 5 seconds\n    TriggerEvent('qb-core:client:HideText')\nend\n\n-- Server example\n\nlocal function examplefunction()\n    TriggerClientEvent('qb-core:client:ChangeText', source, 'This is your changed text', 'left')\nend\n")),(0,a.kt)("h3",{id:"keypressed"},"KeyPressed"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Optional function that is used for displaying an animation on key press then hides the currently displayed text")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"-- Source code for reference\n\nlocal function keyPressed()\n    CreateThread(function()\n        SendNUIMessage({\n            action = 'KEY_PRESSED',\n        })\n        Wait(500)\n        hideText()\n    end)\nend\nexports('KeyPressed', keyPressed)\n\n-- Export example\n\nCreateThread(function()\n    local textDrawn = false\n    while true do\n        Wait(0)\n        if not textDrawn then\n            exports['qb-core']:DrawText('This is a test','left')\n            textDrawn = true\n        end\n        if IsControlJustPressed(0, 38) then\n            exports['qb-core']:KeyPressed()\n        end\n    end\nend)\n\n-- Client example\n\nCreateThread(function()\n    local textDrawn = false\n    while true do\n        Wait(0)\n        if not textDrawn then\n            TriggerEvent('qb-core:client:DrawText', 'This is a test','left')\n            textDrawn = true\n        end\n        if IsControlJustPressed(0, 38) then\n            TriggerEvent('qb-core:client:KeyPressed')\n        end\n    end\nend)\n")))}u.isMDXComponent=!0}}]);