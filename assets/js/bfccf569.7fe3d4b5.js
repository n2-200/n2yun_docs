"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1002],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=c(n),h=a,m=u["".concat(s,".").concat(h)]||u[h]||d[h]||l;return n?r.createElement(m,i(i({ref:t},p),{},{components:n})):r.createElement(m,i({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,i=new Array(l);i[0]=h;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[u]="string"==typeof e?e:a,i[1]=o;for(var c=2;c<l;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},9:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>l,metadata:()=>o,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const l={},i="SpawnVehicle",o={unversionedId:"esx/Server/OneSync/spawnvehicle",id:"esx/Server/OneSync/spawnvehicle",title:"SpawnVehicle",description:"An Async function that Creates Server-Sided Vehicles, this allows them to be persistant and owned by the server, rather than Client",source:"@site/docs/esx/Server/OneSync/spawnvehicle.md",sourceDirName:"esx/Server/OneSync",slug:"/esx/Server/OneSync/spawnvehicle",permalink:"/docs/esx/Server/OneSync/spawnvehicle",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/esx/Server/OneSync/spawnvehicle.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"SpawnPedInVehicle",permalink:"/docs/esx/Server/OneSync/spawnpedinvehicle"},next:{title:"esx:playerDropped",permalink:"/docs/esx/Server/events/playerDropped"}},s={},c=[{value:"Arguments",id:"arguments",level:2},{value:"Example",id:"example",level:2}],p={toc:c},u="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"spawnvehicle"},"SpawnVehicle"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"ESX.OneSync.SpawnVehicle(model, coords, heading, Properties, cb)\n")),(0,a.kt)("p",null,"An Async function that Creates Server-Sided Vehicles, this allows them to be persistant and owned by the server, rather than Client"),(0,a.kt)("h2",{id:"arguments"},"Arguments"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Argument"),(0,a.kt)("th",{parentName:"tr",align:null},"Data Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Optional"),(0,a.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,a.kt)("th",{parentName:"tr",align:null},"Explanation"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"model"),(0,a.kt)("td",{parentName:"tr",align:null},"string & number"),(0,a.kt)("td",{parentName:"tr",align:null},"No"),(0,a.kt)("td",{parentName:"tr",align:null},"-"),(0,a.kt)("td",{parentName:"tr",align:null},"You can either specify a model, for example ",(0,a.kt)("inlineCode",{parentName:"td"},"blista"),", or a vehicle hash.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"coords"),(0,a.kt)("td",{parentName:"tr",align:null},"vector & table"),(0,a.kt)("td",{parentName:"tr",align:null},"No"),(0,a.kt)("td",{parentName:"tr",align:null},"-"),(0,a.kt)("td",{parentName:"tr",align:null},"The coords where the vehicle should be spawned. You can also parse an vector type without any issues")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"heading"),(0,a.kt)("td",{parentName:"tr",align:null},"number"),(0,a.kt)("td",{parentName:"tr",align:null},"No"),(0,a.kt)("td",{parentName:"tr",align:null},"-"),(0,a.kt)("td",{parentName:"tr",align:null},"The heading to spawn the vehicle at")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Properties"),(0,a.kt)("td",{parentName:"tr",align:null},"table"),(0,a.kt)("td",{parentName:"tr",align:null},"Yes"),(0,a.kt)("td",{parentName:"tr",align:null},"{}"),(0,a.kt)("td",{parentName:"tr",align:null},"Sets the properties that the vehicle spawns with, uses the same structure as ",(0,a.kt)("a",{parentName:"td",href:"/docs/esx/Client/functions/game/setvehicleproperties"},"ESX.Game.SetVehicleProperties"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"cb"),(0,a.kt)("td",{parentName:"tr",align:null},"function"),(0,a.kt)("td",{parentName:"tr",align:null},"Yes"),(0,a.kt)("td",{parentName:"tr",align:null},"-"),(0,a.kt)("td",{parentName:"tr",align:null},"The returned function when the vehicle has been spawned. The invoked function has 1 argument which is the ",(0,a.kt)("strong",{parentName:"td"},"NetId")," of the vehicle")))),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"local model = 'blista' -- Model can be either a string or a hash\nlocal coords = vector3(120.0, -200.0, 30.0) -- Coords Can either be vector or a table (such as {x = 0, y = 0, z = 0})\nlocal Heading = 0 -- Sets the Rotation/Heading the vehicle spawns at, can be any number\nlocal Properties = {plate = 'TEST'} -- Sets the vehicle Properties, set to nil or {} for no properties to be set\nESX.OneSync.SpawnVehicle(model,coords, Heading, Properties, function(NetworkId)\n  Wait(100) -- While not needed, it is best to wait a few milliseconds to ensure the vehicle is available\n  local Vehicle = NetworkGetEntityFromNetworkId(NetworkId) -- returns the vehicle handle, from the NetworkId.\n  -- NetworkId is sent over, since then it can also be sent to a client for them to use, vehicle handles cannot.\n  local Exists = DoesEntityExist(Vehicle) -- returns true/false depending on if the vehicle exists.\n  print(Exists and 'Successfully Spawned Vehicle!' or 'Failed to Spawn Vehicle!')\nend)\n")))}d.isMDXComponent=!0}}]);