"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3086],{3905:(e,a,n)=>{n.d(a,{Zo:()=>m,kt:()=>f});var t=n(7294);function r(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function l(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function o(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?l(Object(n),!0).forEach((function(a){r(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function s(e,a){if(null==e)return{};var n,t,r=function(e,a){if(null==e)return{};var n,t,r={},l=Object.keys(e);for(t=0;t<l.length;t++)n=l[t],a.indexOf(n)>=0||(r[n]=e[n]);return r}(e,a);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)n=l[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=t.createContext({}),y=function(e){var a=t.useContext(i),n=a;return e&&(n="function"==typeof e?e(a):o(o({},a),e)),n},m=function(e){var a=y(e.components);return t.createElement(i.Provider,{value:a},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},u=t.forwardRef((function(e,a){var n=e.components,r=e.mdxType,l=e.originalType,i=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),d=y(n),u=r,f=d["".concat(i,".").concat(u)]||d[u]||c[u]||l;return n?t.createElement(f,o(o({ref:a},m),{},{components:n})):t.createElement(f,o({ref:a},m))}));function f(e,a){var n=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=u;var s={};for(var i in a)hasOwnProperty.call(a,i)&&(s[i]=a[i]);s.originalType=e,s[d]="string"==typeof e?e:r,o[1]=s;for(var y=2;y<l;y++)o[y]=n[y];return t.createElement.apply(null,o)}return t.createElement.apply(null,n)}u.displayName="MDXCreateElement"},13:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>i,contentTitle:()=>o,default:()=>c,frontMatter:()=>l,metadata:()=>s,toc:()=>y});var t=n(7462),r=(n(7294),n(3905));const l={description:"Learn how to access and modify a player's data"},o="\ud83d\udcca Player Data",s={unversionedId:"qb-core/player-data",id:"qb-core/player-data",title:"\ud83d\udcca Player Data",description:"Learn how to access and modify a player's data",source:"@site/docs/qb-core/player-data.md",sourceDirName:"qb-core",slug:"/qb-core/player-data",permalink:"/docs/qb-core/player-data",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/qb-core/player-data.md",tags:[],version:"current",frontMatter:{description:"Learn how to access and modify a player's data"},sidebar:"tutorialSidebar",previous:{title:"\ud83d\udcac DrawText",permalink:"/docs/qb-core/drawtext"},next:{title:"\ud83d\udda5 Server Event Reference",permalink:"/docs/qb-core/server-event-reference"}},i={},y=[{value:"QBCore.Player.Login",id:"qbcoreplayerlogin",level:3},{value:"QBCore.Player.CheckPlayerData",id:"qbcoreplayercheckplayerdata",level:3},{value:"QBCore.Player.Logout",id:"qbcoreplayerlogout",level:3},{value:"QBCore.Player.CreatePlayer",id:"qbcoreplayercreateplayer",level:3},{value:"QBCore.Player.Save",id:"qbcoreplayersave",level:3},{value:"QBCore.Player.DeleteCharacter",id:"qbcoreplayerdeletecharacter",level:3}],m={toc:y},d="wrapper";function c(e){let{components:a,...n}=e;return(0,r.kt)(d,(0,t.Z)({},m,n,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"-player-data"},"\ud83d\udcca Player Data"),(0,r.kt)("h3",{id:"qbcoreplayerlogin"},"QBCore.Player.Login"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"On player login, gets their data or sets default values")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"function QBCore.Player.Login(source, citizenid, newData)\n    local src = source\n    if src then\n        if citizenid then\n            local result = MySQL.query.await('SELECT * FROM players WHERE citizenid = ?', { citizenid })\n            local PlayerData = result[1]\n            if PlayerData then\n                PlayerData.money = json.decode(PlayerData.money)\n                PlayerData.job = json.decode(PlayerData.job)\n                PlayerData.position = json.decode(PlayerData.position)\n                PlayerData.metadata = json.decode(PlayerData.metadata)\n                PlayerData.charinfo = json.decode(PlayerData.charinfo)\n                if PlayerData.gang then\n                    PlayerData.gang = json.decode(PlayerData.gang)\n                else\n                    PlayerData.gang = {}\n                end\n            end\n            QBCore.Player.CheckPlayerData(src, PlayerData)\n        else\n            QBCore.Player.CheckPlayerData(src, newData)\n        end\n        return true\n    else\n        QBCore.ShowError(GetCurrentResourceName(), 'ERROR QBCORE.PLAYER.LOGIN - NO SOURCE GIVEN!')\n        return false\n    end\nend\n")),(0,r.kt)("h3",{id:"qbcoreplayercheckplayerdata"},"QBCore.Player.CheckPlayerData"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Function called above on player join to gather player data (this is where you can add/remove additional player data)")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"function QBCore.Player.CheckPlayerData(source, PlayerData)\n    local src = source\n    PlayerData = PlayerData or {}\n    PlayerData.source = src\n    PlayerData.citizenid = PlayerData.citizenid or QBCore.Player.CreateCitizenId()\n    PlayerData.license = PlayerData.license or QBCore.Functions.GetIdentifier(src, 'license')\n    PlayerData.name = GetPlayerName(src)\n    PlayerData.cid = PlayerData.cid or 1\n    PlayerData.money = PlayerData.money or {}\n    for moneytype, startamount in pairs(QBCore.Config.Money.MoneyTypes) do\n        PlayerData.money[moneytype] = PlayerData.money[moneytype] or startamount\n    end\n    -- Charinfo\n    PlayerData.charinfo = PlayerData.charinfo or {}\n    PlayerData.charinfo.firstname = PlayerData.charinfo.firstname or 'Firstname'\n    PlayerData.charinfo.lastname = PlayerData.charinfo.lastname or 'Lastname'\n    PlayerData.charinfo.birthdate = PlayerData.charinfo.birthdate or '00-00-0000'\n    PlayerData.charinfo.gender = PlayerData.charinfo.gender or 0\n    PlayerData.charinfo.backstory = PlayerData.charinfo.backstory or 'placeholder backstory'\n    PlayerData.charinfo.nationality = PlayerData.charinfo.nationality or 'USA'\n    PlayerData.charinfo.phone = PlayerData.charinfo.phone ~= nil and PlayerData.charinfo.phone or '1' .. math.random(111111111, 999999999)\n    PlayerData.charinfo.account = PlayerData.charinfo.account ~= nil and PlayerData.charinfo.account or 'US0' .. math.random(1, 9) .. 'QBCore' .. math.random(1111, 9999) .. math.random(1111, 9999) .. math.random(11, 99)\n    -- Metadata\n    PlayerData.metadata = PlayerData.metadata or {}\n    PlayerData.metadata['hunger'] = PlayerData.metadata['hunger'] or 100\n    PlayerData.metadata['thirst'] = PlayerData.metadata['thirst'] or 100\n    PlayerData.metadata['stress'] = PlayerData.metadata['stress'] or 0\n    PlayerData.metadata['isdead'] = PlayerData.metadata['isdead'] or false\n    PlayerData.metadata['inlaststand'] = PlayerData.metadata['inlaststand'] or false\n    PlayerData.metadata['armor'] = PlayerData.metadata['armor'] or 0\n    PlayerData.metadata['ishandcuffed'] = PlayerData.metadata['ishandcuffed'] or false\n    PlayerData.metadata['tracker'] = PlayerData.metadata['tracker'] or false\n    PlayerData.metadata['injail'] = PlayerData.metadata['injail'] or 0\n    PlayerData.metadata['jailitems'] = PlayerData.metadata['jailitems'] or {}\n    PlayerData.metadata['status'] = PlayerData.metadata['status'] or {}\n    PlayerData.metadata['phone'] = PlayerData.metadata['phone'] or {}\n    PlayerData.metadata['fitbit'] = PlayerData.metadata['fitbit'] or {}\n    PlayerData.metadata['commandbinds'] = PlayerData.metadata['commandbinds'] or {}\n    PlayerData.metadata['bloodtype'] = PlayerData.metadata['bloodtype'] or QBCore.Config.Player.Bloodtypes[math.random(1, #QBCore.Config.Player.Bloodtypes)]\n    PlayerData.metadata['dealerrep'] = PlayerData.metadata['dealerrep'] or 0\n    PlayerData.metadata['craftingrep'] = PlayerData.metadata['craftingrep'] or 0\n    PlayerData.metadata['attachmentcraftingrep'] = PlayerData.metadata['attachmentcraftingrep'] or 0\n    PlayerData.metadata['currentapartment'] = PlayerData.metadata['currentapartment'] or nil\n    PlayerData.metadata['jobrep'] = PlayerData.metadata['jobrep'] or {\n        ['tow'] = 0,\n        ['trucker'] = 0,\n        ['taxi'] = 0,\n        ['hotdog'] = 0,\n    }\n    PlayerData.metadata['callsign'] = PlayerData.metadata['callsign'] or 'NO CALLSIGN'\n    PlayerData.metadata['fingerprint'] = PlayerData.metadata['fingerprint'] or QBCore.Player.CreateFingerId()\n    PlayerData.metadata['walletid'] = PlayerData.metadata['walletid'] or QBCore.Player.CreateWalletId()\n    PlayerData.metadata['criminalrecord'] = PlayerData.metadata['criminalrecord'] or {\n        ['hasRecord'] = false,\n        ['date'] = nil\n    }\n    PlayerData.metadata['licences'] = PlayerData.metadata['licences'] or {\n        ['driver'] = true,\n        ['business'] = false,\n        ['weapon'] = false\n    }\n    PlayerData.metadata['inside'] = PlayerData.metadata['inside'] or {\n        house = nil,\n        apartment = {\n            apartmentType = nil,\n            apartmentId = nil,\n        }\n    }\n    PlayerData.metadata['phonedata'] = PlayerData.metadata['phonedata'] or {\n        SerialNumber = QBCore.Player.CreateSerialNumber(),\n        InstalledApps = {},\n    }\n    -- Job\n    PlayerData.job = PlayerData.job or {}\n    PlayerData.job.name = PlayerData.job.name or 'unemployed'\n    PlayerData.job.label = PlayerData.job.label or 'Civilian'\n    PlayerData.job.payment = PlayerData.job.payment or 10\n    if QBCore.Shared.ForceJobDefaultDutyAtLogin or PlayerData.job.onduty == nil then\n        PlayerData.job.onduty = QBCore.Shared.Jobs[PlayerData.job.name].defaultDuty\n    end\n    PlayerData.job.isboss = PlayerData.job.isboss or false\n    PlayerData.job.grade = PlayerData.job.grade or {}\n    PlayerData.job.grade.name = PlayerData.job.grade.name or 'Freelancer'\n    PlayerData.job.grade.level = PlayerData.job.grade.level or 0\n    -- Gang\n    PlayerData.gang = PlayerData.gang or {}\n    PlayerData.gang.name = PlayerData.gang.name or 'none'\n    PlayerData.gang.label = PlayerData.gang.label or 'No Gang Affiliaton'\n    PlayerData.gang.isboss = PlayerData.gang.isboss or false\n    PlayerData.gang.grade = PlayerData.gang.grade or {}\n    PlayerData.gang.grade.name = PlayerData.gang.grade.name or 'none'\n    PlayerData.gang.grade.level = PlayerData.gang.grade.level or 0\n    -- Other\n    PlayerData.position = PlayerData.position or QBConfig.DefaultSpawn\n    PlayerData.LoggedIn = true\n    PlayerData = QBCore.Player.LoadInventory(PlayerData)\n    QBCore.Player.CreatePlayer(PlayerData)\nend\n")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"qbcoreplayerlogout"},"QBCore.Player.Logout"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Saves player on logout and removes them from active players table")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"function QBCore.Player.Logout(source)\n    local src = source\n    TriggerClientEvent('QBCore:Client:OnPlayerUnload', src)\n    TriggerClientEvent('QBCore:Player:UpdatePlayerData', src)\n    Wait(200)\n    QBCore.Players[src] = nil\nend\n")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"qbcoreplayercreateplayer"},"QBCore.Player.CreatePlayer"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Creates a new character and sets default data (any function inside the self table can be called on the player after using the GetPlayer function)")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"function QBCore.Player.CreatePlayer(PlayerData)\n    local self = {}\n    self.Functions = {}\n    self.PlayerData = PlayerData\n\n    self.Functions.UpdatePlayerData = function(dontUpdateChat)\n        TriggerClientEvent('QBCore:Player:SetPlayerData', self.PlayerData.source, self.PlayerData)\n        if dontUpdateChat == nil then\n            QBCore.Commands.Refresh(self.PlayerData.source)\n        end\n    end\n\n    self.Functions.SetJob = function(job, grade)\n        local job = job:lower()\n        local grade = tostring(grade) or '0'\n\n        if QBCore.Shared.Jobs[job] then\n            self.PlayerData.job.name = job\n            self.PlayerData.job.label = QBCore.Shared.Jobs[job].label\n            self.PlayerData.job.onduty = QBCore.Shared.Jobs[job].defaultDuty\n\n            if QBCore.Shared.Jobs[job].grades[grade] then\n                local jobgrade = QBCore.Shared.Jobs[job].grades[grade]\n                self.PlayerData.job.grade = {}\n                self.PlayerData.job.grade.name = jobgrade.name\n                self.PlayerData.job.grade.level = tonumber(grade)\n                self.PlayerData.job.payment = jobgrade.payment or 30\n                self.PlayerData.job.isboss = jobgrade.isboss or false\n            else\n                self.PlayerData.job.grade = {}\n                self.PlayerData.job.grade.name = 'No Grades'\n                self.PlayerData.job.grade.level = 0\n                self.PlayerData.job.payment = 30\n                self.PlayerData.job.isboss = false\n            end\n\n            self.Functions.UpdatePlayerData()\n            TriggerClientEvent('QBCore:Client:OnJobUpdate', self.PlayerData.source, self.PlayerData.job)\n            return true\n        end\n\n        return false\n    end\n\n    self.Functions.SetGang = function(gang, grade)\n        local gang = gang:lower()\n        local grade = tostring(grade) or '0'\n\n        if QBCore.Shared.Gangs[gang] then\n            self.PlayerData.gang.name = gang\n            self.PlayerData.gang.label = QBCore.Shared.Gangs[gang].label\n            if QBCore.Shared.Gangs[gang].grades[grade] then\n                local ganggrade = QBCore.Shared.Gangs[gang].grades[grade]\n                self.PlayerData.gang.grade = {}\n                self.PlayerData.gang.grade.name = ganggrade.name\n                self.PlayerData.gang.grade.level = tonumber(grade)\n                self.PlayerData.gang.isboss = ganggrade.isboss or false\n            else\n                self.PlayerData.gang.grade = {}\n                self.PlayerData.gang.grade.name = 'No Grades'\n                self.PlayerData.gang.grade.level = 0\n                self.PlayerData.gang.isboss = false\n            end\n\n            self.Functions.UpdatePlayerData()\n            TriggerClientEvent('QBCore:Client:OnGangUpdate', self.PlayerData.source, self.PlayerData.gang)\n            return true\n        end\n        return false\n    end\n\n    self.Functions.SetJobDuty = function(onDuty)\n        self.PlayerData.job.onduty = onDuty\n        self.Functions.UpdatePlayerData()\n    end\n\n    self.Functions.SetMetaData = function(meta, val)\n        local meta = meta:lower()\n        if val ~= nil then\n            self.PlayerData.metadata[meta] = val\n            self.Functions.UpdatePlayerData()\n        end\n    end\n\n    self.Functions.AddJobReputation = function(amount)\n        local amount = tonumber(amount)\n        self.PlayerData.metadata['jobrep'][self.PlayerData.job.name] = self.PlayerData.metadata['jobrep'][self.PlayerData.job.name] + amount\n        self.Functions.UpdatePlayerData()\n    end\n\n    self.Functions.AddMoney = function(moneytype, amount, reason)\n        reason = reason or 'unknown'\n        local moneytype = moneytype:lower()\n        local amount = tonumber(amount)\n        if amount < 0 then\n            return\n        end\n        if self.PlayerData.money[moneytype] then\n            self.PlayerData.money[moneytype] = self.PlayerData.money[moneytype] + amount\n            self.Functions.UpdatePlayerData()\n            if amount > 100000 then\n                TriggerEvent('qb-log:server:CreateLog', 'playermoney', 'AddMoney', 'lightgreen', '**' .. GetPlayerName(self.PlayerData.source) .. ' (citizenid: ' .. self.PlayerData.citizenid .. ' | id: ' .. self.PlayerData.source .. ')** $' .. amount .. ' (' .. moneytype .. ') added, new ' .. moneytype .. ' balance: ' .. self.PlayerData.money[moneytype], true)\n            else\n                TriggerEvent('qb-log:server:CreateLog', 'playermoney', 'AddMoney', 'lightgreen', '**' .. GetPlayerName(self.PlayerData.source) .. ' (citizenid: ' .. self.PlayerData.citizenid .. ' | id: ' .. self.PlayerData.source .. ')** $' .. amount .. ' (' .. moneytype .. ') added, new ' .. moneytype .. ' balance: ' .. self.PlayerData.money[moneytype])\n            end\n            TriggerClientEvent('hud:client:OnMoneyChange', self.PlayerData.source, moneytype, amount, false)\n            return true\n        end\n        return false\n    end\n\n    self.Functions.RemoveMoney = function(moneytype, amount, reason)\n        reason = reason or 'unknown'\n        local moneytype = moneytype:lower()\n        local amount = tonumber(amount)\n        if amount < 0 then\n            return\n        end\n        if self.PlayerData.money[moneytype] then\n            for _, mtype in pairs(QBCore.Config.Money.DontAllowMinus) do\n                if mtype == moneytype then\n                    if self.PlayerData.money[moneytype] - amount < 0 then\n                        return false\n                    end\n                end\n            end\n            self.PlayerData.money[moneytype] = self.PlayerData.money[moneytype] - amount\n            self.Functions.UpdatePlayerData()\n            if amount > 100000 then\n                TriggerEvent('qb-log:server:CreateLog', 'playermoney', 'RemoveMoney', 'red', '**' .. GetPlayerName(self.PlayerData.source) .. ' (citizenid: ' .. self.PlayerData.citizenid .. ' | id: ' .. self.PlayerData.source .. ')** $' .. amount .. ' (' .. moneytype .. ') removed, new ' .. moneytype .. ' balance: ' .. self.PlayerData.money[moneytype], true)\n            else\n                TriggerEvent('qb-log:server:CreateLog', 'playermoney', 'RemoveMoney', 'red', '**' .. GetPlayerName(self.PlayerData.source) .. ' (citizenid: ' .. self.PlayerData.citizenid .. ' | id: ' .. self.PlayerData.source .. ')** $' .. amount .. ' (' .. moneytype .. ') removed, new ' .. moneytype .. ' balance: ' .. self.PlayerData.money[moneytype])\n            end\n            TriggerClientEvent('hud:client:OnMoneyChange', self.PlayerData.source, moneytype, amount, true)\n            if moneytype == 'bank' then\n                TriggerClientEvent('qb-phone:client:RemoveBankMoney', self.PlayerData.source, amount)\n            end\n            return true\n        end\n        return false\n    end\n\n    self.Functions.SetMoney = function(moneytype, amount, reason)\n        reason = reason or 'unknown'\n        local moneytype = moneytype:lower()\n        local amount = tonumber(amount)\n        if amount < 0 then\n            return\n        end\n        if self.PlayerData.money[moneytype] then\n            self.PlayerData.money[moneytype] = amount\n            self.Functions.UpdatePlayerData()\n            TriggerEvent('qb-log:server:CreateLog', 'playermoney', 'SetMoney', 'green', '**' .. GetPlayerName(self.PlayerData.source) .. ' (citizenid: ' .. self.PlayerData.citizenid .. ' | id: ' .. self.PlayerData.source .. ')** $' .. amount .. ' (' .. moneytype .. ') set, new ' .. moneytype .. ' balance: ' .. self.PlayerData.money[moneytype])\n            return true\n        end\n        return false\n    end\n\n    self.Functions.GetMoney = function(moneytype)\n        if moneytype then\n            local moneytype = moneytype:lower()\n            return self.PlayerData.money[moneytype]\n        end\n        return false\n    end\n\n    self.Functions.AddItem = function(item, amount, slot, info)\n        local totalWeight = QBCore.Player.GetTotalWeight(self.PlayerData.items)\n        local itemInfo = QBCore.Shared.Items[item:lower()]\n        if itemInfo == nil then\n            TriggerClientEvent('QBCore:Notify', self.PlayerData.source, 'Item Does Not Exist', 'error')\n            return\n        end\n        local amount = tonumber(amount)\n        local slot = tonumber(slot) or QBCore.Player.GetFirstSlotByItem(self.PlayerData.items, item)\n        if itemInfo['type'] == 'weapon' and info == nil then\n            info = {\n                serie = tostring(QBCore.Shared.RandomInt(2) .. QBCore.Shared.RandomStr(3) .. QBCore.Shared.RandomInt(1) .. QBCore.Shared.RandomStr(2) .. QBCore.Shared.RandomInt(3) .. QBCore.Shared.RandomStr(4)),\n            }\n        end\n        if (totalWeight + (itemInfo['weight'] * amount)) <= QBCore.Config.Player.MaxWeight then\n            if (slot and self.PlayerData.items[slot]) and (self.PlayerData.items[slot].name:lower() == item:lower()) and (itemInfo['type'] == 'item' and not itemInfo['unique']) then\n                self.PlayerData.items[slot].amount = self.PlayerData.items[slot].amount + amount\n                self.Functions.UpdatePlayerData()\n                TriggerEvent('qb-log:server:CreateLog', 'playerinventory', 'AddItem', 'green', '**' .. GetPlayerName(self.PlayerData.source) .. ' (citizenid: ' .. self.PlayerData.citizenid .. ' | id: ' .. self.PlayerData.source .. ')** got item: [slot:' .. slot .. '], itemname: ' .. self.PlayerData.items[slot].name .. ', added amount: ' .. amount .. ', new total amount: ' .. self.PlayerData.items[slot].amount)\n                return true\n            elseif (not itemInfo['unique'] and slot or slot and self.PlayerData.items[slot] == nil) then\n                self.PlayerData.items[slot] = { name = itemInfo['name'], amount = amount, info = info or '', label = itemInfo['label'], description = itemInfo['description'] or '', weight = itemInfo['weight'], type = itemInfo['type'], unique = itemInfo['unique'], useable = itemInfo['useable'], image = itemInfo['image'], shouldClose = itemInfo['shouldClose'], slot = slot, combinable = itemInfo['combinable'] }\n                self.Functions.UpdatePlayerData()\n                TriggerEvent('qb-log:server:CreateLog', 'playerinventory', 'AddItem', 'green', '**' .. GetPlayerName(self.PlayerData.source) .. ' (citizenid: ' .. self.PlayerData.citizenid .. ' | id: ' .. self.PlayerData.source .. ')** got item: [slot:' .. slot .. '], itemname: ' .. self.PlayerData.items[slot].name .. ', added amount: ' .. amount .. ', new total amount: ' .. self.PlayerData.items[slot].amount)\n                return true\n            elseif (itemInfo['unique']) or (not slot or slot == nil) or (itemInfo['type'] == 'weapon') then\n                for i = 1, QBConfig.Player.MaxInvSlots, 1 do\n                    if self.PlayerData.items[i] == nil then\n                        self.PlayerData.items[i] = { name = itemInfo['name'], amount = amount, info = info or '', label = itemInfo['label'], description = itemInfo['description'] or '', weight = itemInfo['weight'], type = itemInfo['type'], unique = itemInfo['unique'], useable = itemInfo['useable'], image = itemInfo['image'], shouldClose = itemInfo['shouldClose'], slot = i, combinable = itemInfo['combinable'] }\n                        self.Functions.UpdatePlayerData()\n                        TriggerEvent('qb-log:server:CreateLog', 'playerinventory', 'AddItem', 'green', '**' .. GetPlayerName(self.PlayerData.source) .. ' (citizenid: ' .. self.PlayerData.citizenid .. ' | id: ' .. self.PlayerData.source .. ')** got item: [slot:' .. i .. '], itemname: ' .. self.PlayerData.items[i].name .. ', added amount: ' .. amount .. ', new total amount: ' .. self.PlayerData.items[i].amount)\n                        --TriggerClientEvent('QBCore:Notify', self.PlayerData.source, itemInfo['label'].. ' toegevoegd!', 'success')\n                        return true\n                    end\n                end\n            end\n        else\n            TriggerClientEvent('QBCore:Notify', self.PlayerData.source, 'Your inventory is too heavy!', 'error')\n        end\n        return false\n    end\n\n    self.Functions.RemoveItem = function(item, amount, slot)\n        local amount = tonumber(amount)\n        local slot = tonumber(slot)\n        if slot then\n            if self.PlayerData.items[slot].amount > amount then\n                self.PlayerData.items[slot].amount = self.PlayerData.items[slot].amount - amount\n                self.Functions.UpdatePlayerData()\n                TriggerEvent('qb-log:server:CreateLog', 'playerinventory', 'RemoveItem', 'red', '**' .. GetPlayerName(self.PlayerData.source) .. ' (citizenid: ' .. self.PlayerData.citizenid .. ' | id: ' .. self.PlayerData.source .. ')** lost item: [slot:' .. slot .. '], itemname: ' .. self.PlayerData.items[slot].name .. ', removed amount: ' .. amount .. ', new total amount: ' .. self.PlayerData.items[slot].amount)\n                return true\n            else\n                self.PlayerData.items[slot] = nil\n                self.Functions.UpdatePlayerData()\n                TriggerEvent('qb-log:server:CreateLog', 'playerinventory', 'RemoveItem', 'red', '**' .. GetPlayerName(self.PlayerData.source) .. ' (citizenid: ' .. self.PlayerData.citizenid .. ' | id: ' .. self.PlayerData.source .. ')** lost item: [slot:' .. slot .. '], itemname: ' .. item .. ', removed amount: ' .. amount .. ', item removed')\n                return true\n            end\n        else\n            local slots = QBCore.Player.GetSlotsByItem(self.PlayerData.items, item)\n            local amountToRemove = amount\n            if slots then\n                for _, slot in pairs(slots) do\n                    if self.PlayerData.items[slot].amount > amountToRemove then\n                        self.PlayerData.items[slot].amount = self.PlayerData.items[slot].amount - amountToRemove\n                        self.Functions.UpdatePlayerData()\n                        TriggerEvent('qb-log:server:CreateLog', 'playerinventory', 'RemoveItem', 'red', '**' .. GetPlayerName(self.PlayerData.source) .. ' (citizenid: ' .. self.PlayerData.citizenid .. ' | id: ' .. self.PlayerData.source .. ')** lost item: [slot:' .. slot .. '], itemname: ' .. self.PlayerData.items[slot].name .. ', removed amount: ' .. amount .. ', new total amount: ' .. self.PlayerData.items[slot].amount)\n                        return true\n                    elseif self.PlayerData.items[slot].amount == amountToRemove then\n                        self.PlayerData.items[slot] = nil\n                        self.Functions.UpdatePlayerData()\n                        TriggerEvent('qb-log:server:CreateLog', 'playerinventory', 'RemoveItem', 'red', '**' .. GetPlayerName(self.PlayerData.source) .. ' (citizenid: ' .. self.PlayerData.citizenid .. ' | id: ' .. self.PlayerData.source .. ')** lost item: [slot:' .. slot .. '], itemname: ' .. item .. ', removed amount: ' .. amount .. ', item removed')\n                        return true\n                    end\n                end\n            end\n        end\n        return false\n    end\n\n    self.Functions.SetInventory = function(items, dontUpdateChat)\n        self.PlayerData.items = items\n        self.Functions.UpdatePlayerData(dontUpdateChat)\n        TriggerEvent('qb-log:server:CreateLog', 'playerinventory', 'SetInventory', 'blue', '**' .. GetPlayerName(self.PlayerData.source) .. ' (citizenid: ' .. self.PlayerData.citizenid .. ' | id: ' .. self.PlayerData.source .. ')** items set: ' .. json.encode(items))\n    end\n\n    self.Functions.ClearInventory = function()\n        self.PlayerData.items = {}\n        self.Functions.UpdatePlayerData()\n        TriggerEvent('qb-log:server:CreateLog', 'playerinventory', 'ClearInventory', 'red', '**' .. GetPlayerName(self.PlayerData.source) .. ' (citizenid: ' .. self.PlayerData.citizenid .. ' | id: ' .. self.PlayerData.source .. ')** inventory cleared')\n    end\n\n    self.Functions.GetItemByName = function(item)\n        local item = tostring(item):lower()\n        local slot = QBCore.Player.GetFirstSlotByItem(self.PlayerData.items, item)\n        if slot then\n            return self.PlayerData.items[slot]\n        end\n        return nil\n    end\n\n    self.Functions.GetItemsByName = function(item)\n        local item = tostring(item):lower()\n        local items = {}\n        local slots = QBCore.Player.GetSlotsByItem(self.PlayerData.items, item)\n        for _, slot in pairs(slots) do\n            if slot then\n                items[#items+1] = self.PlayerData.items[slot]\n            end\n        end\n        return items\n    end\n\n    self.Functions.SetCreditCard = function(cardNumber)\n        self.PlayerData.charinfo.card = cardNumber\n        self.Functions.UpdatePlayerData()\n    end\n\n    self.Functions.GetCardSlot = function(cardNumber, cardType)\n        local item = tostring(cardType):lower()\n        local slots = QBCore.Player.GetSlotsByItem(self.PlayerData.items, item)\n        for _, slot in pairs(slots) do\n            if slot then\n                if self.PlayerData.items[slot].info.cardNumber == cardNumber then\n                    return slot\n                end\n            end\n        end\n        return nil\n    end\n\n    self.Functions.GetItemBySlot = function(slot)\n        local slot = tonumber(slot)\n        if self.PlayerData.items[slot] then\n            return self.PlayerData.items[slot]\n        end\n        return nil\n    end\n\n    self.Functions.Save = function()\n        QBCore.Player.Save(self.PlayerData.source)\n    end\n\n    QBCore.Players[self.PlayerData.source] = self\n    QBCore.Player.Save(self.PlayerData.source)\n\n    -- At this point we are safe to emit new instance to third party resource for load handling\n    TriggerEvent('QBCore:Server:PlayerLoaded', self)\n    self.Functions.UpdatePlayerData()\nend\n")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"qbcoreplayersave"},"QBCore.Player.Save"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Saves the player's info to the database")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"function QBCore.Player.Save(source)\n    local src = source\n    local ped = GetPlayerPed(src)\n    local pcoords = GetEntityCoords(ped)\n    local PlayerData = QBCore.Players[src].PlayerData\n    if PlayerData then\n        MySQL.insert('INSERT INTO players (citizenid, cid, license, name, money, charinfo, job, gang, position, metadata) VALUES (:citizenid, :cid, :license, :name, :money, :charinfo, :job, :gang, :position, :metadata) ON DUPLICATE KEY UPDATE cid = :cid, name = :name, money = :money, charinfo = :charinfo, job = :job, gang = :gang, position = :position, metadata = :metadata', {\n            citizenid = PlayerData.citizenid,\n            cid = tonumber(PlayerData.cid),\n            license = PlayerData.license,\n            name = PlayerData.name,\n            money = json.encode(PlayerData.money),\n            charinfo = json.encode(PlayerData.charinfo),\n            job = json.encode(PlayerData.job),\n            gang = json.encode(PlayerData.gang),\n            position = json.encode(pcoords),\n            metadata = json.encode(PlayerData.metadata)\n        })\n        QBCore.Player.SaveInventory(src)\n        QBCore.ShowSuccess(GetCurrentResourceName(), PlayerData.name ..' PLAYER SAVED!')\n    else\n        QBCore.ShowError(GetCurrentResourceName(), 'ERROR QBCORE.PLAYER.SAVE - PLAYERDATA IS EMPTY!')\n    end\nend\n")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"qbcoreplayerdeletecharacter"},"QBCore.Player.DeleteCharacter"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Deletes a character and all corresponding data in the database")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"local playertables = { -- Add tables here as needed\n    {table = 'players'},\n    {table = 'apartments'},\n    {table = 'bank_accounts'},\n    {table = 'crypto_transactions'},\n    {table = 'phone_invoices'},\n    {table = 'phone_messages'},\n    {table = 'playerskins'},\n    {table = 'player_boats'},\n    {table = 'player_contacts'},\n    {table = 'player_houses'},\n    {table = 'player_mails'},\n    {table = 'player_outfits'},\n    {table = 'player_vehicles'}\n}\n\nfunction QBCore.Player.DeleteCharacter(source, citizenid)\n    local src = source\n    local license = QBCore.Functions.GetIdentifier(src, 'license')\n    local result = MySQL.scalar.await('SELECT license FROM players where citizenid = ?', { citizenid })\n    if license == result then\n        for k,v in pairs(playertables) do\n            MySQL.query('DELETE FROM '..v.table..' WHERE citizenid = ?', { citizenid })\n        end\n        TriggerEvent('qb-log:server:CreateLog', 'joinleave', 'Character Deleted', 'red', '**'.. GetPlayerName(src) .. '** '..license..' deleted **'..citizenid..'**..')\n    else\n        DropPlayer(src, 'You Have Been Kicked For Exploitation')\n        TriggerEvent('qb-log:server:CreateLog', 'anticheat', 'Anti-Cheat', 'white', GetPlayerName(src)..' Has Been Dropped For Character Deletion Exploit', false)\n    end\nend\n")))}c.isMDXComponent=!0}}]);