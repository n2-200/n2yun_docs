"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8412],{3905:(e,n,o)=>{o.d(n,{Zo:()=>d,kt:()=>m});var t=o(7294);function l(e,n,o){return n in e?Object.defineProperty(e,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[n]=o,e}function r(e,n){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),o.push.apply(o,t)}return o}function i(e){for(var n=1;n<arguments.length;n++){var o=null!=arguments[n]?arguments[n]:{};n%2?r(Object(o),!0).forEach((function(n){l(e,n,o[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):r(Object(o)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(o,n))}))}return e}function c(e,n){if(null==e)return{};var o,t,l=function(e,n){if(null==e)return{};var o,t,l={},r=Object.keys(e);for(t=0;t<r.length;t++)o=r[t],n.indexOf(o)>=0||(l[o]=e[o]);return l}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)o=r[t],n.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(l[o]=e[o])}return l}var s=t.createContext({}),a=function(e){var n=t.useContext(s),o=n;return e&&(o="function"==typeof e?e(n):i(i({},n),e)),o},d=function(e){var n=a(e.components);return t.createElement(s.Provider,{value:n},e.children)},p="mdxType",h={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef((function(e,n){var o=e.components,l=e.mdxType,r=e.originalType,s=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),p=a(o),u=l,m=p["".concat(s,".").concat(u)]||p[u]||h[u]||r;return o?t.createElement(m,i(i({ref:n},d),{},{components:o})):t.createElement(m,i({ref:n},d))}));function m(e,n){var o=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var r=o.length,i=new Array(r);i[0]=u;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c[p]="string"==typeof e?e:l,i[1]=c;for(var a=2;a<r;a++)i[a]=o[a];return t.createElement.apply(null,i)}return t.createElement.apply(null,o)}u.displayName="MDXCreateElement"},1690:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>h,frontMatter:()=>r,metadata:()=>c,toc:()=>a});var t=o(7462),l=(o(7294),o(3905));const r={description:"Learn about and how to use common core client functions!"},i="\ud83c\udfae Client Function Reference",c={unversionedId:"qb-core/client-function-reference",id:"qb-core/client-function-reference",title:"\ud83c\udfae Client Function Reference",description:"Learn about and how to use common core client functions!",source:"@site/docs/qb-core/client-function-reference.md",sourceDirName:"qb-core",slug:"/qb-core/client-function-reference",permalink:"/docs/qb-core/client-function-reference",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/qb-core/client-function-reference.md",tags:[],version:"current",frontMatter:{description:"Learn about and how to use common core client functions!"},sidebar:"tutorialSidebar",previous:{title:"\ud83c\udfae Client Event Reference",permalink:"/docs/qb-core/client-event-reference"},next:{title:"\u2757 Commands",permalink:"/docs/qb-core/commands"}},s={},a=[{value:"QBCore.Functions.GetPlayerData",id:"qbcorefunctionsgetplayerdata",level:3},{value:"QBCore.Functions.GetCoords",id:"qbcorefunctionsgetcoords",level:3},{value:"QBCore.Functions.HasItem",id:"qbcorefunctionshasitem",level:3},{value:"QBCore.Functions.Notify",id:"qbcorefunctionsnotify",level:3},{value:"QBCore.Functions.TriggerCallback",id:"qbcorefunctionstriggercallback",level:3},{value:"QBCore.Functions.Progressbar",id:"qbcorefunctionsprogressbar",level:3},{value:"QBCore.Functions.GetVehicles",id:"qbcorefunctionsgetvehicles",level:3},{value:"QBCore.Functions.GetCoreObject",id:"qbcorefunctionsgetcoreobject",level:3},{value:"QBCore.Functions.GetPlayers",id:"qbcorefunctionsgetplayers",level:3},{value:"QBCore.Functions.GetPeds",id:"qbcorefunctionsgetpeds",level:3},{value:"QBCore.Functions.GetClosestPed",id:"qbcorefunctionsgetclosestped",level:3},{value:"QBCore.Functions.GetClosestVehicle",id:"qbcorefunctionsgetclosestvehicle",level:3},{value:"QBCore.Functions.GetClosestObject",id:"qbcorefunctionsgetclosestobject",level:3},{value:"QBCore.Functions.GetClosestPlayer",id:"qbcorefunctionsgetclosestplayer",level:3},{value:"QBCore.Functions.GetPlayersFromCoords",id:"qbcorefunctionsgetplayersfromcoords",level:3},{value:"QBCore.Functions.SpawnVehicle",id:"qbcorefunctionsspawnvehicle",level:3},{value:"QBCore.Functions.DeleteVehicle",id:"qbcorefunctionsdeletevehicle",level:3},{value:"QBCore.Functions.GetPlate",id:"qbcorefunctionsgetplate",level:3},{value:"QBCore.Functions.GetVehicleProperties",id:"qbcorefunctionsgetvehicleproperties",level:3},{value:"QBCore.Functions.SetVehicleProperties",id:"qbcorefunctionssetvehicleproperties",level:3}],d={toc:a},p="wrapper";function h(e){let{components:n,...o}=e;return(0,l.kt)(p,(0,t.Z)({},d,o,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"-client-function-reference"},"\ud83c\udfae Client Function Reference"),(0,l.kt)("h3",{id:"qbcorefunctionsgetplayerdata"},"QBCore.Functions.GetPlayerData"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},'Perhaps the most used function in the framework. This function returns the players data of the current source which, since its used client side, is automatically the client or player. It can be used with modifiers on the end starting with a "." (period)')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},"function QBCore.Functions.GetPlayerData(cb)\n    if not cb then return QBCore.PlayerData end\n    cb(QBCore.PlayerData)\nend\n\n-- Example\n\nlocal Player = QBCore.Functions.GetPlayerData()\nprint(QBCore.Debug(Player))\n\nOR\n\nlocal Player = QBCore.Functions.GetPlayerData()\nlocal jobName = Player.job.name\nprint(jobName)\n")),(0,l.kt)("h3",{id:"qbcorefunctionsgetcoords"},"QBCore.Functions.GetCoords"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"This function operates very similarly to how the native GetEntityCoords does, but it returns the heading as well")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},"function QBCore.Functions.GetCoords(entity)\n    return vector4(GetEntityCoords(entity), GetEntityHeading(entity))\nend\n\n-- Example\n\nlocal coords = QBCore.Functions.GetCoords(PlayerPedId())\nprint(coords)\n")),(0,l.kt)("h3",{id:"qbcorefunctionshasitem"},"QBCore.Functions.HasItem"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Returns whether a player has a certain item")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},"function QBCore.Functions.HasItem(item)\n    local p = promise.new()\n    QBCore.Functions.TriggerCallback('QBCore:HasItem', function(result)\n        p:resolve(result)\n    end, item)\n    return Citizen.Await(p)\nend\n\n-- Example\n\nlocal hasItem = QBCore.Functions.HasItem('my_cool_item')\nprint(hasItem)\n")),(0,l.kt)("h3",{id:"qbcorefunctionsnotify"},"QBCore.Functions.Notify"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"center"},"Arguments"),(0,l.kt)("th",{parentName:"tr",align:"center"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"center"},"Required"),(0,l.kt)("th",{parentName:"tr",align:"center"},"Default"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},"message"),(0,l.kt)("td",{parentName:"tr",align:"center"},"string ","|"," table"),(0,l.kt)("td",{parentName:"tr",align:"center"},"yes"),(0,l.kt)("td",{parentName:"tr",align:"center"},"'Placeholder'")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},"type"),(0,l.kt)("td",{parentName:"tr",align:"center"},"string"),(0,l.kt)("td",{parentName:"tr",align:"center"},"yes"),(0,l.kt)("td",{parentName:"tr",align:"center"},"'primary'")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},"length"),(0,l.kt)("td",{parentName:"tr",align:"center"},"number"),(0,l.kt)("td",{parentName:"tr",align:"center"},"yes"),(0,l.kt)("td",{parentName:"tr",align:"center"},"5000")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},"function QBCore.Functions.Notify(text, textype, length)\n    if type(text) == \"table\" then\n        local ttext = text.text or 'Placeholder'\n        local caption = text.caption or 'Placeholder'\n        local ttype = textype or 'primary'\n        local length = length or 5000\n        SendNUIMessage({\n            type = ttype,\n            length = length,\n            text = ttext,\n            caption = caption\n        })\n    else\n        local ttype = textype or 'primary'\n        local length = length or 5000\n        SendNUIMessage({\n            type = ttype,\n            length = length,\n            text = text\n        })\n    end\nend\n\n-- Example\n\nQBCore.Functions.Notify('This is a test', 'success', 5000)\n\nQBCore.Functions.Notify({text = 'Test', caption = 'Test Caption'}, 'police', 5000)\n")),(0,l.kt)("h3",{id:"qbcorefunctionstriggercallback"},"QBCore.Functions.TriggerCallback"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Function used to call from the client to the server and receive a value back")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},"function QBCore.Functions.TriggerCallback(name, cb, ...)\n    QBCore.ServerCallbacks[name] = cb\n    TriggerServerEvent('QBCore:Server:TriggerCallback', name, ...)\nend\n\n-- Example\n\nQBCore.Functions.TriggerCallback('callbackName', function(result)\n    print('I got this from the CreateCallBack --\x3e  '..result)\nend, 'my_parameter_name')\n")),(0,l.kt)("h3",{id:"qbcorefunctionsprogressbar"},"QBCore.Functions.Progressbar"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Wrapper for progressbar export")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},"function QBCore.Functions.Progressbar(name, label, duration, useWhileDead, canCancel, disableControls, animation, prop, propTwo, onFinish, onCancel)\n    exports['progressbar']:Progress({\n        name = name:lower(),\n        duration = duration,\n        label = label,\n        useWhileDead = useWhileDead,\n        canCancel = canCancel,\n        controlDisables = disableControls,\n        animation = animation,\n        prop = prop,\n        propTwo = propTwo,\n    }, function(cancelled)\n        if not cancelled then\n            if onFinish then\n                onFinish()\n            end\n        else\n            if onCancel then\n                onCancel()\n            end\n        end\n    end)\nend\n\n-- Available parameters to be called\n\nlocal Action = {\n    name = \"\",\n    duration = 0,\n    label = \"\",\n    useWhileDead = false,\n    canCancel = true,\n    disarm = true,\n    controlDisables = {\n        disableMovement = false,\n        disableCarMovement = false,\n        disableMouse = false,\n        disableCombat = false,\n    },\n    animation = {\n        animDict = nil,\n        anim = nil,\n        flags = 0,\n        task = nil,\n    },\n    prop = {\n        model = nil,\n        bone = nil,\n        coords = { x = 0.0, y = 0.0, z = 0.0 },\n        rotation = { x = 0.0, y = 0.0, z = 0.0 },\n    },\n    propTwo = {\n        model = nil,\n        bone = nil,\n        coords = { x = 0.0, y = 0.0, z = 0.0 },\n        rotation = { x = 0.0, y = 0.0, z = 0.0 },\n    },\n}\n\n-- Example\n\nQBCore.Functions.Progressbar('Changeme', 'What the player sees', 1500, false, true, {\n    disableMovement = true,\n    disableCarMovement = true,\n    disableMouse = false,\n    disableCombat = true\n    }, {}, {}, {}, function()\n        -- This code runs if the progress bar completes successfully\n    end, function()\n        -- This code runs if the progress bar gets cancelled\nend)\n")),(0,l.kt)("h3",{id:"qbcorefunctionsgetvehicles"},"QBCore.Functions.GetVehicles"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Returns vehicle game pool (for backwards compatibility) - Not worth using")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},"function QBCore.Functions.GetVehicles()\n    return GetGamePool('CVehicle')\nend\n\n-- Example\n\nlocal vehicles = QBCore.Functions.GetVehicles()\nprint(QBCore.Debug(vehicles))\n\nOR -- preferred method\n\nlocal vehicles = GetGamePool('CVehicle')\nprint(QBCore.Debug(vehicles))\n")),(0,l.kt)("h3",{id:"qbcorefunctionsgetcoreobject"},"QBCore.Functions.GetCoreObject"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Returns the core object for accessing")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},"exports('GetCoreObject', function()\n    return QBCore\nend)\n\n-- Example\n\nlocal QBCore = exports['qb-core']:GetCoreObject()\n\nOR -- call the core in a single file that loads before the others\n\nQBCore = exports['qb-core']:GetCoreObject()\n")),(0,l.kt)("h3",{id:"qbcorefunctionsgetplayers"},"QBCore.Functions.GetPlayers"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Returns active players in OneSync scope (for backwards compatibility) - Not worth using")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},"function QBCore.Functions.GetPlayers()\n    return GetActivePlayers()\nend\n\n-- Example\n\nlocal players = QBCore.Functions.GetPlayers()\nprint(QBCore.Debug(players))\n\nOR -- preferred method\n\nlocal players = GetActivePlayers()\nprint(QBCore.Debug(players))\n")),(0,l.kt)("h3",{id:"qbcorefunctionsgetpeds"},"QBCore.Functions.GetPeds"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Returns a model hash filtered ped game pool")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},"function QBCore.Functions.GetPeds(ignoreList -- [[table]])\n    local pedPool = GetGamePool('CPed')\n    local ignoreList = ignoreList or {}\n    local peds = {}\n    for i = 1, #pedPool, 1 do\n        local found = false\n        for j=1, #ignoreList, 1 do\n            if ignoreList[j] == pedPool[i] then\n                found = true\n            end\n        end\n        if not found then\n            peds[#peds+1] = pedPool[i]\n        end\n    end\n    return peds\nend\n\n-- Example\n\nlocal peds = QBCore.Functions.GetPeds({`mp_m_freemode_01`})\nprint(QBCore.Debug(peds))\n")),(0,l.kt)("h3",{id:"qbcorefunctionsgetclosestped"},"QBCore.Functions.GetClosestPed"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Returns the closest ped to the player after filtering")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},"function QBCore.Functions.GetClosestPed(coords, ignoreList)\n    local ped = PlayerPedId()\n    if coords then\n        coords = type(coords) == 'table' and vec3(coords.x, coords.y, coords.z) or coords\n    else\n        coords = GetEntityCoords(ped)\n    end\n    local ignoreList = ignoreList or {}\n    local peds = QBCore.Functions.GetPeds(ignoreList)\n    local closestDistance = -1\n    local closestPed = -1\n    for i = 1, #peds, 1 do\n        local pedCoords = GetEntityCoords(peds[i])\n        local distance = #(pedCoords - coords)\n\n        if closestDistance == -1 or closestDistance > distance then\n            closestPed = peds[i]\n            closestDistance = distance\n        end\n    end\n    return closestPed, closestDistance\nend\n\n-- Example\n\nlocal coords = GetEntityCoords(PlayerPedId())\nlocal closestPed, distance = QBCore.Functions.GetClosestPed(coords)\nprint(closestPed, distance)\n")),(0,l.kt)("h3",{id:"qbcorefunctionsgetclosestvehicle"},"QBCore.Functions.GetClosestVehicle"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Returns the closest vehicle to the player")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},"function QBCore.Functions.GetClosestVehicle(coords)\n    local ped = PlayerPedId()\n    local vehicles = GetGamePool('CVehicle')\n    local closestDistance = -1\n    local closestVehicle = -1\n    if coords then\n        coords = type(coords) == 'table' and vec3(coords.x, coords.y, coords.z) or coords\n    else\n        coords = GetEntityCoords(ped)\n    end\n    for i = 1, #vehicles, 1 do\n        local vehicleCoords = GetEntityCoords(vehicles[i])\n        local distance = #(vehicleCoords - coords)\n\n        if closestDistance == -1 or closestDistance > distance then\n            closestVehicle = vehicles[i]\n            closestDistance = distance\n        end\n    end\n    return closestVehicle, closestDistance\nend\n\n-- Example\n\nlocal coords = GetEntityCoords(PlayerPedId())\nlocal closestVehicle, distance = QBCore.Functions.GetClosestVehicle(coords)\nprint(closestVehicle, distance)\n")),(0,l.kt)("h3",{id:"qbcorefunctionsgetclosestobject"},"QBCore.Functions.GetClosestObject"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Returns the closest object to the player")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},"function QBCore.Functions.GetClosestObject(coords)\n    local ped = PlayerPedId()\n    local objects = GetGamePool('CObject')\n    local closestDistance = -1\n    local closestObject = -1\n    if coords then\n        coords = type(coords) == 'table' and vec3(coords.x, coords.y, coords.z) or coords\n    else\n        coords = GetEntityCoords(ped)\n    end\n    for i = 1, #objects, 1 do\n        local objectCoords = GetEntityCoords(objects[i])\n        local distance = #(objectCoords - coords)\n        if closestDistance == -1 or closestDistance > distance then\n            closestObject = objects[i]\n            closestDistance = distance\n        end\n    end\n    return closestObject, closestDistance\nend\n\n-- Example\n\nlocal coords = GetEntityCoords(PlayerPedId())\nlocal closestObject, distance = QBCore.Functions.GetClosestObject(coords)\nprint(closestObject, distance)\n")),(0,l.kt)("h3",{id:"qbcorefunctionsgetclosestplayer"},"QBCore.Functions.GetClosestPlayer"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Returns the closest player to the client")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},"function QBCore.Functions.GetClosestPlayer(coords)\n    local ped = PlayerPedId()\n    if coords then\n        coords = type(coords) == 'table' and vec3(coords.x, coords.y, coords.z) or coords\n    else\n        coords = GetEntityCoords(ped)\n    end\n    local closestPlayers = QBCore.Functions.GetPlayersFromCoords(coords)\n    local closestDistance = -1\n    local closestPlayer = -1\n    for i = 1, #closestPlayers, 1 do\n        if closestPlayers[i] ~= PlayerId() and closestPlayers[i] ~= -1 then\n            local pos = GetEntityCoords(GetPlayerPed(closestPlayers[i]))\n            local distance = #(pos - coords)\n\n            if closestDistance == -1 or closestDistance > distance then\n                closestPlayer = closestPlayers[i]\n                closestDistance = distance\n            end\n        end\n    end\n    return closestPlayer, closestDistance\nend\n\n-- Example\n\nlocal coords = GetEntityCoords(PlayerPedId())\nlocal closestPlayer, distance = QBCore.Functions.GetClosestPlayer(coords)\nprint(closestPlayer, distance)\n")),(0,l.kt)("h3",{id:"qbcorefunctionsgetplayersfromcoords"},"QBCore.Functions.GetPlayersFromCoords"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Returns all players within a radius of specific coordinates")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},"function QBCore.Functions.GetPlayersFromCoords(coords, distance)\n    local players = QBCore.Functions.GetPlayers()\n    local ped = PlayerPedId()\n    if coords then\n        coords = type(coords) == 'table' and vec3(coords.x, coords.y, coords.z) or coords\n    else\n        coords = GetEntityCoords(ped)\n    end\n    local distance = distance or 5\n    local closePlayers = {}\n    for _, player in pairs(players) do\n        local target = GetPlayerPed(player)\n        local targetCoords = GetEntityCoords(target)\n        local targetdistance = #(targetCoords - coords)\n        if targetdistance <= distance then\n            closePlayers[#closePlayers + 1] = player\n        end\n    end\n    return closePlayers\nend\n\n-- Example\n\nlocal coords = GetEntityCoords(PlayerPedId())\nlocal radius = 5.0\nlocal closestPlayers = QBCore.Functions.GetPlayersFromCoords(coords, radius)\nprint(QBCore.Debug(closestPlayers))\n")),(0,l.kt)("h3",{id:"qbcorefunctionsspawnvehicle"},"QBCore.Functions.SpawnVehicle"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Spawn a vehicle")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},"function QBCore.Functions.SpawnVehicle(model, cb, coords, isnetworked)\n    local model = GetHashKey(model)\n    local ped = PlayerPedId()\n    if coords then\n        coords = type(coords) == 'table' and vec3(coords.x, coords.y, coords.z) or coords\n    else\n        coords = GetEntityCoords(ped)\n    end\n    local isnetworked = isnetworked or true\n    if not IsModelInCdimage(model) then\n        return\n    end\n    RequestModel(model)\n    while not HasModelLoaded(model) do\n        Wait(10)\n    end\n    local veh = CreateVehicle(model, coords.x, coords.y, coords.z, coords.w, isnetworked, false)\n    local netid = NetworkGetNetworkIdFromEntity(veh)\n    SetVehicleHasBeenOwnedByPlayer(veh, true)\n    SetNetworkIdCanMigrate(netid, true)\n    SetVehicleNeedsToBeHotwired(veh, false)\n    SetVehRadioStation(veh, 'OFF')\n    SetModelAsNoLongerNeeded(model)\n    if cb then\n        cb(veh)\n    end\nend\n\n-- Example\n\nlocal coords = QBCore.Functions.GetCoords(PlayerPedId())\nQBCore.Functions.SpawnVehicle('adder', function(veh)\n    SetVehicleNumberPlateText(veh, 'TEST')\n    SetEntityHeading(veh, coords.w)\n    exports['LegacyFuel']:SetFuel(veh, 100.0)\n    TaskWarpPedIntoVehicle(PlayerPedId(), veh, -1)\n    TriggerEvent(\"vehiclekeys:client:SetOwner\", QBCore.Functions.GetPlate(veh))\n    SetVehicleEngineOn(veh, true, true)\nend, coords, true)\n")),(0,l.kt)("h3",{id:"qbcorefunctionsdeletevehicle"},"QBCore.Functions.DeleteVehicle"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Delete a specific vehicle through the client - Not worth using")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},"function QBCore.Functions.DeleteVehicle(vehicle)\n    SetEntityAsMissionEntity(vehicle, true, true)\n    DeleteVehicle(vehicle)\nend\n\n-- Example\n\nlocal ped = PlayerPedId()\nlocal veh = GetVehiclePedIsUsing(ped)\nif veh ~= 0 then\n    QBCore.Functions.DeleteVehicle(veh)\nelse\n    local pcoords = GetEntityCoords(ped)\n    local vehicles = GetGamePool('CVehicle')\n    for k, v in pairs(vehicles) do\n        if #(pcoords - GetEntityCoords(v)) <= 5.0 then\n            QBCore.Functions.DeleteVehicle(v)\n        end\n    end\nend\n\nOR -- preferred method\n\nlocal ped = PlayerPedId()\nlocal veh = GetVehiclePedIsUsing(ped)\nif veh ~= 0 then\n    SetEntityAsMissionEntity(veh, true, true)\n    DeleteVehicle(veh)\nelse\n    local pcoords = GetEntityCoords(ped)\n    local vehicles = GetGamePool('CVehicle')\n    for k, v in pairs(vehicles) do\n        if #(pcoords - GetEntityCoords(v)) <= 5.0 then\n            SetEntityAsMissionEntity(v, true, true)\n            DeleteVehicle(v)\n        end\n    end\nend\n")),(0,l.kt)("h3",{id:"qbcorefunctionsgetplate"},"QBCore.Functions.GetPlate"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Returns the plate text of a specific vehicle after trimming the whitespace from it")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},"function QBCore.Functions.GetPlate(vehicle)\n    if vehicle == 0 then return end\n    return QBCore.Shared.Trim(GetVehicleNumberPlateText(vehicle))\nend\n\n-- Example\n\nlocal vehicle = GetVehiclePedIsUsing(PlayerPedId())\nlocal plate = QBCore.Functions.GetPlate(vehicle)\nprint(plate)\n")),(0,l.kt)("h3",{id:"qbcorefunctionsgetvehicleproperties"},"QBCore.Functions.GetVehicleProperties"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Get all properties of a vehicle")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},"function QBCore.Functions.GetVehicleProperties(vehicle)\n    if DoesEntityExist(vehicle) then\n        local colorPrimary, colorSecondary = GetVehicleColours(vehicle)\n        local pearlescentColor, wheelColor = GetVehicleExtraColours(vehicle)\n        local extras = {}\n\n        for extraId = 0, 12 do\n            if DoesExtraExist(vehicle, extraId) then\n                local state = IsVehicleExtraTurnedOn(vehicle, extraId) == 1\n                extras[tostring(extraId)] = state\n            end\n        end\n\n        if GetVehicleMod(vehicle, 48) == -1 and GetVehicleLivery(vehicle) ~= -1 then\n            modLivery = GetVehicleLivery(vehicle)\n        else\n            modLivery = GetVehicleMod(vehicle, 48)\n        end\n\n        return {\n            model = GetEntityModel(vehicle),\n            plate = QBCore.Functions.GetPlate(vehicle),\n            plateIndex = GetVehicleNumberPlateTextIndex(vehicle),\n            bodyHealth = QBCore.Shared.Round(GetVehicleBodyHealth(vehicle), 0.1),\n            engineHealth = QBCore.Shared.Round(GetVehicleEngineHealth(vehicle), 0.1),\n            tankHealth = QBCore.Shared.Round(GetVehiclePetrolTankHealth(vehicle), 0.1),\n            fuelLevel = QBCore.Shared.Round(GetVehicleFuelLevel(vehicle), 0.1),\n            dirtLevel = QBCore.Shared.Round(GetVehicleDirtLevel(vehicle), 0.1),\n            color1 = colorPrimary,\n            color2 = colorSecondary,\n            pearlescentColor = pearlescentColor,\n            interiorColor = GetVehicleInteriorColor(vehicle),\n            dashboardColor = GetVehicleDashboardColour(vehicle),\n            wheelColor = wheelColor,\n            wheels = GetVehicleWheelType(vehicle),\n            windowTint = GetVehicleWindowTint(vehicle),\n            xenonColor = GetVehicleXenonLightsColour(vehicle),\n            neonEnabled = {\n                IsVehicleNeonLightEnabled(vehicle, 0),\n                IsVehicleNeonLightEnabled(vehicle, 1),\n                IsVehicleNeonLightEnabled(vehicle, 2),\n                IsVehicleNeonLightEnabled(vehicle, 3)\n            },\n            neonColor = table.pack(GetVehicleNeonLightsColour(vehicle)),\n            extras = extras,\n            tyreSmokeColor = table.pack(GetVehicleTyreSmokeColor(vehicle)),\n            modSpoilers = GetVehicleMod(vehicle, 0),\n            modFrontBumper = GetVehicleMod(vehicle, 1),\n            modRearBumper = GetVehicleMod(vehicle, 2),\n            modSideSkirt = GetVehicleMod(vehicle, 3),\n            modExhaust = GetVehicleMod(vehicle, 4),\n            modFrame = GetVehicleMod(vehicle, 5),\n            modGrille = GetVehicleMod(vehicle, 6),\n            modHood = GetVehicleMod(vehicle, 7),\n            modFender = GetVehicleMod(vehicle, 8),\n            modRightFender = GetVehicleMod(vehicle, 9),\n            modRoof = GetVehicleMod(vehicle, 10),\n            modEngine = GetVehicleMod(vehicle, 11),\n            modBrakes = GetVehicleMod(vehicle, 12),\n            modTransmission = GetVehicleMod(vehicle, 13),\n            modHorns = GetVehicleMod(vehicle, 14),\n            modSuspension = GetVehicleMod(vehicle, 15),\n            modArmor = GetVehicleMod(vehicle, 16),\n            modTurbo = IsToggleModOn(vehicle, 18),\n            modSmokeEnabled = IsToggleModOn(vehicle, 20),\n            modXenon = IsToggleModOn(vehicle, 22),\n            modFrontWheels = GetVehicleMod(vehicle, 23),\n            modBackWheels = GetVehicleMod(vehicle, 24),\n            modCustomTiresF = GetVehicleModVariation(vehicle, 23),\n            modCustomTiresR = GetVehicleModVariation(vehicle, 24),\n            modPlateHolder = GetVehicleMod(vehicle, 25),\n            modVanityPlate = GetVehicleMod(vehicle, 26),\n            modTrimA = GetVehicleMod(vehicle, 27),\n            modOrnaments = GetVehicleMod(vehicle, 28),\n            modDashboard = GetVehicleMod(vehicle, 29),\n            modDial = GetVehicleMod(vehicle, 30),\n            modDoorSpeaker = GetVehicleMod(vehicle, 31),\n            modSeats = GetVehicleMod(vehicle, 32),\n            modSteeringWheel = GetVehicleMod(vehicle, 33),\n            modShifterLeavers = GetVehicleMod(vehicle, 34),\n            modAPlate = GetVehicleMod(vehicle, 35),\n            modSpeakers = GetVehicleMod(vehicle, 36),\n            modTrunk = GetVehicleMod(vehicle, 37),\n            modHydrolic = GetVehicleMod(vehicle, 38),\n            modEngineBlock = GetVehicleMod(vehicle, 39),\n            modAirFilter = GetVehicleMod(vehicle, 40),\n            modStruts = GetVehicleMod(vehicle, 41),\n            modArchCover = GetVehicleMod(vehicle, 42),\n            modAerials = GetVehicleMod(vehicle, 43),\n            modTrimB = GetVehicleMod(vehicle, 44),\n            modTank = GetVehicleMod(vehicle, 45),\n            modWindows = GetVehicleMod(vehicle, 46),\n            modLivery = modLivery,\n        }\n    else\n        return\n    end\nend\n\n-- Example\n\nlocal vehicle = GetVehiclePedIsUsing(PlayerPedId())\nlocal vehicleProps = QBCore.Functions.GetVehicleProperties(vehicle)\nprint(QBCore.Debug(vehicleProps))\n")),(0,l.kt)("h3",{id:"qbcorefunctionssetvehicleproperties"},"QBCore.Functions.SetVehicleProperties"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Set all properties for a vehicle")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},"function QBCore.Functions.SetVehicleProperties(vehicle, props)\n    if DoesEntityExist(vehicle) then\n        local colorPrimary, colorSecondary = GetVehicleColours(vehicle)\n        local pearlescentColor, wheelColor = GetVehicleExtraColours(vehicle)\n        SetVehicleModKit(vehicle, 0)\n        if props.plate then\n            SetVehicleNumberPlateText(vehicle, props.plate)\n        end\n        if props.plateIndex then\n            SetVehicleNumberPlateTextIndex(vehicle, props.plateIndex)\n        end\n        if props.bodyHealth then\n            SetVehicleBodyHealth(vehicle, props.bodyHealth + 0.0)\n        end\n        if props.engineHealth then\n            SetVehicleEngineHealth(vehicle, props.engineHealth + 0.0)\n        end\n        if props.fuelLevel then\n            SetVehicleFuelLevel(vehicle, props.fuelLevel + 0.0)\n        end\n        if props.dirtLevel then\n            SetVehicleDirtLevel(vehicle, props.dirtLevel + 0.0)\n        end\n        if props.color1 then\n            SetVehicleColours(vehicle, props.color1, colorSecondary)\n        end\n        if props.color2 then\n            SetVehicleColours(vehicle, props.color1 or colorPrimary, props.color2)\n        end\n        if props.pearlescentColor then\n            SetVehicleExtraColours(vehicle, props.pearlescentColor, wheelColor)\n        end\n        if props.interiorColor then\n            SetVehicleInteriorColor(vehicle, props.interiorColor)\n        end\n        if props.dashboardColor then\n            SetVehicleDashboardColour(vehicle, props.dashboardColor)\n        end\n        if props.wheelColor then\n            SetVehicleExtraColours(vehicle, props.pearlescentColor or pearlescentColor, props.wheelColor)\n        end\n        if props.wheels then\n            SetVehicleWheelType(vehicle, props.wheels)\n        end\n        if props.windowTint then\n            SetVehicleWindowTint(vehicle, props.windowTint)\n        end\n        if props.neonEnabled then\n            SetVehicleNeonLightEnabled(vehicle, 0, props.neonEnabled[1])\n            SetVehicleNeonLightEnabled(vehicle, 1, props.neonEnabled[2])\n            SetVehicleNeonLightEnabled(vehicle, 2, props.neonEnabled[3])\n            SetVehicleNeonLightEnabled(vehicle, 3, props.neonEnabled[4])\n        end\n        if props.extras then\n            for id, enabled in pairs(props.extras) do\n                if enabled then\n                    SetVehicleExtra(vehicle, tonumber(id), 0)\n                else\n                    SetVehicleExtra(vehicle, tonumber(id), 1)\n                end\n            end\n        end\n        if props.neonColor then\n            SetVehicleNeonLightsColour(vehicle, props.neonColor[1], props.neonColor[2], props.neonColor[3])\n        end\n        if props.modSmokeEnabled then\n            ToggleVehicleMod(vehicle, 20, true)\n        end\n        if props.tyreSmokeColor then\n            SetVehicleTyreSmokeColor(vehicle, props.tyreSmokeColor[1], props.tyreSmokeColor[2], props.tyreSmokeColor[3])\n        end\n        if props.modSpoilers then\n            SetVehicleMod(vehicle, 0, props.modSpoilers, false)\n        end\n        if props.modFrontBumper then\n            SetVehicleMod(vehicle, 1, props.modFrontBumper, false)\n        end\n        if props.modRearBumper then\n            SetVehicleMod(vehicle, 2, props.modRearBumper, false)\n        end\n        if props.modSideSkirt then\n            SetVehicleMod(vehicle, 3, props.modSideSkirt, false)\n        end\n        if props.modExhaust then\n            SetVehicleMod(vehicle, 4, props.modExhaust, false)\n        end\n        if props.modFrame then\n            SetVehicleMod(vehicle, 5, props.modFrame, false)\n        end\n        if props.modGrille then\n            SetVehicleMod(vehicle, 6, props.modGrille, false)\n        end\n        if props.modHood then\n            SetVehicleMod(vehicle, 7, props.modHood, false)\n        end\n        if props.modFender then\n            SetVehicleMod(vehicle, 8, props.modFender, false)\n        end\n        if props.modRightFender then\n            SetVehicleMod(vehicle, 9, props.modRightFender, false)\n        end\n        if props.modRoof then\n            SetVehicleMod(vehicle, 10, props.modRoof, false)\n        end\n        if props.modEngine then\n            SetVehicleMod(vehicle, 11, props.modEngine, false)\n        end\n        if props.modBrakes then\n            SetVehicleMod(vehicle, 12, props.modBrakes, false)\n        end\n        if props.modTransmission then\n            SetVehicleMod(vehicle, 13, props.modTransmission, false)\n        end\n        if props.modHorns then\n            SetVehicleMod(vehicle, 14, props.modHorns, false)\n        end\n        if props.modSuspension then\n            SetVehicleMod(vehicle, 15, props.modSuspension, false)\n        end\n        if props.modArmor then\n            SetVehicleMod(vehicle, 16, props.modArmor, false)\n        end\n        if props.modTurbo then\n            ToggleVehicleMod(vehicle, 18, props.modTurbo)\n        end\n        if props.modXenon then\n            ToggleVehicleMod(vehicle, 22, props.modXenon)\n        end\n        if props.xenonColor then\n            SetVehicleXenonLightsColor(vehicle, props.xenonColor)\n        end\n        if props.modFrontWheels then\n            SetVehicleMod(vehicle, 23, props.modFrontWheels, false)\n        end\n        if props.modBackWheels then\n            SetVehicleMod(vehicle, 24, props.modBackWheels, false)\n        end\n        if props.modCustomTiresF then\n            SetVehicleMod(vehicle, 23, props.modFrontWheels, props.modCustomTiresF)\n        end\n        if props.modCustomTiresR then\n            SetVehicleMod(vehicle, 24, props.modBackWheels, props.modCustomTiresR)\n        end\n        if props.modPlateHolder then\n            SetVehicleMod(vehicle, 25, props.modPlateHolder, false)\n        end\n        if props.modVanityPlate then\n            SetVehicleMod(vehicle, 26, props.modVanityPlate, false)\n        end\n        if props.modTrimA then\n            SetVehicleMod(vehicle, 27, props.modTrimA, false)\n        end\n        if props.modOrnaments then\n            SetVehicleMod(vehicle, 28, props.modOrnaments, false)\n        end\n        if props.modDashboard then\n            SetVehicleMod(vehicle, 29, props.modDashboard, false)\n        end\n        if props.modDial then\n            SetVehicleMod(vehicle, 30, props.modDial, false)\n        end\n        if props.modDoorSpeaker then\n            SetVehicleMod(vehicle, 31, props.modDoorSpeaker, false)\n        end\n        if props.modSeats then\n            SetVehicleMod(vehicle, 32, props.modSeats, false)\n        end\n        if props.modSteeringWheel then\n            SetVehicleMod(vehicle, 33, props.modSteeringWheel, false)\n        end\n        if props.modShifterLeavers then\n            SetVehicleMod(vehicle, 34, props.modShifterLeavers, false)\n        end\n        if props.modAPlate then\n            SetVehicleMod(vehicle, 35, props.modAPlate, false)\n        end\n        if props.modSpeakers then\n            SetVehicleMod(vehicle, 36, props.modSpeakers, false)\n        end\n        if props.modTrunk then\n            SetVehicleMod(vehicle, 37, props.modTrunk, false)\n        end\n        if props.modHydrolic then\n            SetVehicleMod(vehicle, 38, props.modHydrolic, false)\n        end\n        if props.modEngineBlock then\n            SetVehicleMod(vehicle, 39, props.modEngineBlock, false)\n        end\n        if props.modAirFilter then\n            SetVehicleMod(vehicle, 40, props.modAirFilter, false)\n        end\n        if props.modStruts then\n            SetVehicleMod(vehicle, 41, props.modStruts, false)\n        end\n        if props.modArchCover then\n            SetVehicleMod(vehicle, 42, props.modArchCover, false)\n        end\n        if props.modAerials then\n            SetVehicleMod(vehicle, 43, props.modAerials, false)\n        end\n        if props.modTrimB then\n            SetVehicleMod(vehicle, 44, props.modTrimB, false)\n        end\n        if props.modTank then\n            SetVehicleMod(vehicle, 45, props.modTank, false)\n        end\n        if props.modWindows then\n            SetVehicleMod(vehicle, 46, props.modWindows, false)\n        end\n        if props.modLivery then\n            SetVehicleMod(vehicle, 48, props.modLivery, false)\n            SetVehicleLivery(vehicle, props.modLivery)\n        end\n    end\nend\n\n-- Example\n\nlocal vehicle = GetVehiclePedIsUsing(PlayerPedId())\nlocal vehicleProps = QBCore.Functions.GetVehicleProperties(vehicle)\nQBCore.Functions.SetVehicleProperties(vehicle, vehicleProps)\n")))}h.isMDXComponent=!0}}]);